@startuml C4_Container
!include <C4/C4_Container>

LAYOUT_TOP_DOWN()

Person(user, "User", "Взаимодействует с платформой")
System_Boundary(c1, "Краудфандинговые платформа") {
    Container(web_client, "Web App", "Next js", $descr="Основной интерфейс для взаимодействия пользователей с платформой")
    Container(api_gateway, "API Gateway", "Kong", $descr="Центральный узел для маршрутизации запросов между клиентами (Web App) и микросервисами. Обеспечивает авторизацию, аутентификацию, мониторинг и логирование запросов")
    Container(auth_service, "Auth Service", "Axum", $descr="Сервис для управления пользователями")
    Container(project_service, "Project Service", "Axum", $descr="Сервис для управления проектами")
    Container(donation_service, "Donation Service", "Fastify", $descr="Сервис для управления пожертвованиями")
Container(notification_service, "Notification Service", "Axum", $descr="Сервис для управления уведомлениями")
    Container(chat_service, "Chat Service", "Axum", $descr="Сервис для управления чатами")
    ContainerQueue(kafka, "Kafka",  $descr="Организует очередь сообщений")
    ContainerDb(project_db, "Project DB","Elasticsearch",  $descr="База данных для хранения информации о проектах")
    ContainerDb(user_db, "User DB","Postgres",  $descr="Реляционная база данных для хранения информации о пользователях")
    ContainerDb(donation_db, "Donation DB","Postgres",  $descr="База данных для хранения информации о пожертвованиях")
    ContainerDb(chat_db, "Chat DB","MongoDB",  $descr="База данных для хранения чатов и сообщений")
    ContainerDb(redis, "Redis",  $descr="Кэш-хранилище для временного хранения данных")
}
    Container_Ext(firebase, "Firebase",  $descr="Внешний сервис для отправки push-уведомлений")

Rel(user, web_client, "Uses", "HTTPS")
Rel(web_client, api_gateway, "Uses", "REST/GRAPHQL/WS")
Rel_L(api_gateway, auth_service, "Uses", "gRPC")
Rel(api_gateway, donation_service, "Uses", "REST")
Rel(api_gateway, project_service, "Uses", "GRAPHQL")
Rel(api_gateway, chat_service, "Uses", "WS")
Rel(api_gateway, notification_service, "Uses", "WS")
Rel(notification_service, kafka, "Uses", "Kafka")
Rel(notification_service, redis,)
Rel(notification_service, firebase, "Uses", "REST")
Rel(chat_service, kafka, "Uses", "Kafka")
Rel(chat_service, redis,)
Rel(project_service, kafka, "Uses", "Kafka")
Rel(project_service, project_db, )
Rel(auth_service, user_db, )
Rel(donation_service, donation_db, )
Rel_R(chat_service, chat_db, )
@enduml